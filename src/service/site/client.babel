const endpoint = "/api";
const routes = {
  browse: `${endpoint}/search`,
  account: `${endpoint}/account`,
  search: (q) => `${endpoint}/search?q=${q}"`,
  profile: (id) => `${endpoint}/profile/${id}`,
  transactionsByProfile: (id) => `${endpoint}/profile/${id}/transactions`,
  transaction: (id) => `${endpoint}/transaction/${id}`,
}

const AsyncComponent = (getData, renderAsync) =>
  class extends React.Component
  {
    constructor(props)
    {
      super(props);
      this.props = props;
      this.fetched = false;
      this.placeHolder = <div></div>;
    }

    componentDidMount(){
      return getData(this.props).then(data => {
        this.fetched = true;
        this.setState(data);
      });
    }

    render(){ return !this.fetched ? this.placeHolder : renderAsync(this.state); }
  }

class Account {
  constructor(userName = "", signedIn = false, currentTokens = 0){
    [this.userName, this.signedIn, this.currentTokens] = [userName, signedIn, currentTokens];
  }
}

class AccountRepository{
  constructor(){
    this.currentUser = new Account("Guest");
  }
  getAccount(){
    return fetch(routes.account)
      .then(data => data.json())
      .then(data => new Account(data.userName, data.signedIn, data.currentTokens));}
}

class CharityRepository {
  constructor(){
    this._charities = [];
    this.fetched = false;
  }

  getCharity(charityId){
    return this.charities
    .then(() => this._charities.filter(c => c.id == charityId)[0]);
  }

  get charities(){
    if(!this.fetched){
      return fetch(routes.browse)
        .then(data => data.json())
        .then(data => {
          this.fetched = true;
          this._charities = data;
          return this._charities;
        })
    }else{
      return new Promise((resolve, reject)=>resolve(this._charities));
    }
  }
}

var charityRepo = new CharityRepository();
var accountRepo = new AccountRepository();

const Router = ReactRouterDOM.BrowserRouter;
const Link = ReactRouterDOM.Link;
const Route = ReactRouterDOM.Route;

const navitems = [
  {name:"Browse Charities", state:"/browse-charities" },
  {name:"Account", state:"/account" },
];

const AccountView = AsyncComponent (() =>  accountRepo.getAccount(), (state) =>
    <span className="btn btn-outline-success">{state.userName} {state.currentTokens} tokens remaining</span>)

const Nav = props =>
  <nav className="navbar navbar-toggleable-md navbar-light">
      <ul className="nav mr-auto bg-faded">
        {navitems.map(item =>
          <NavItem
            active={props.active == item.state}
            key={item.state}
            link={item.state}
            name={item.name} />)}
      </ul>
    <form className="form-inline">
      <input type="text" className="form-control" placeholder="Search" />
      <button className="btn btn-outline-success">Search</button>
    </form>
    <span className="nav-text"><Link to="/account" className="nav-link"><AccountView /></Link></span>
    </nav>

const NavItem = props =>
  <li key={props.link} className={props.active ? "nav-item active" : "nav-item"}>
    <Link className="nav-link" to={props.link}>{props.name}</Link>
  </li>

const Charity = props =>
  <div className="charity card">
    <div className="card-block">
      <h3 className="card-title name"><Link to={`/charity/${props.name}/${props.id}`}>{props.name}</Link></h3>
      <div className="card-block description">{props.description}</div>
    </div>
  </div>

const BrowseCharities = AsyncComponent(() => charityRepo.charities.then(data => {return {charities:data}}), state =>
    <div>
      <h1>Browse Charities</h1>
      <div>
        {state.charities.map(charity=>
          <Charity key={charity.id} id={charity.id} name={charity.name} description={charity.description} />)}
      </div>
    </div>)

const AccountDetails = AsyncComponent(() => accountRepo.getAccount(), state =>
  <div>
    <h1>{state.userName}</h1>
    <div>{state.currentTokens} tokens remaining <a href="#" className="btn btn-success">{'\u002B'}</a></div>
  </div>)

const CharityDetailAsync = AsyncComponent((props) => charityRepo.getCharity(props.id).then(charity=>{return {charity:charity}}), (state) =>
    <div>
      <h1>{state.charity.name}</h1>
      <Link to="/account" className="btn btn-success">Donate</Link>
      <div>{state.charity.description}</div>
    </div>)

const CharityDetail = (match) => <CharityDetailAsync id={match.match.params.id} />

const App = (match) =>
  <div>
    <Route path="/account" component={AccountDetails} />
    <Route path="/browse-charities" component={BrowseCharities} />
    <Route path="/charity/:name/:id" component={CharityDetail} />
    <Route exact path="/" component={BrowseCharities} />
  </div>

ReactDOM.render(<Router>
  <div>
    <Nav />
    <Route path="/" component={App}></Route>
  </div>
</Router>, document.getElementById("root"));
